 .o88o. .o88o. |  _ \    __ _   _ __     __| |
 8    8 8    8 | |_) |  / _` | | '_ \   / _` |
 8    8 8    8 |  _ <  | (_| | | | | | | (_| |
 88oo8' `8oo88 |_| \_\  \__,_| |_| |_|  \__,_|
 8           8 
 8           8 

pqRand: The precise quantile random package
	version 0.4.1 (beta); May 2017
	Copyright(c) 2017 (see COPYRIGHT_NOTICE)

By Keith Pedersen (Keith.David.Pedersen @ gmail.com)
	https://github.com/keith-pedersen/pqRand
	https://arxiv.org/abs/1704.07949

Special thanks to Zack Sullivan, Andrew Webster and Sebastiano Vigna.

This package is designed to improve sampling from the following distributions
========================================================================
	* normal
	* log-normal
	* exponential
	* weibull
	* pareto
	
ATTENTION.
========================================================================
	This package is in beta. Please see the disclaimer in the COPYRIGHT_NOTICE.
	If you find a bug, PLEASE contact me with as much information as you can. 
	I am also open to new features (like new distributions, or new ways to use them) 
	and suggestions for the API.
	
	Additionally, this package uses C++11. Hopefully by now (2017), 
	C++11 is supported at your site. My apologies if it is not, 
	but there are SO many reasons to use it.
	
INSTALLATION
========================================================================
	To (locally) make the C++ library, the C++ examples, and the Python library, run:
		./install
	If you make changes to the code, or need to do change the Doxyfile to 
	fix the documentation, run: 
		./update
	"update" runs "install", then regenerates the documentation.
	
USAGE
========================================================================
	Page through the documentation ("doc/documentation.html"), 
	then check out "examples/pqRand_Example.cpp" or "examples/pYqRand_Example.py"
	to learn how to use the package. Currently, only the C++ code has
	pretty documentation, but the Python API is 99% identical to C++.
	I've also tried to document all source code that isn't immediately obvious.
	
	This package is designed for GNU/Linux machines.
	Running the "install" script should build libraries for C++ and python, 
	and examples for C++. My apologies if it doesn't work on your system, 
	but I've only developed on GNU/Linux, so I don't know how to support 
	Windows or Mac.
	
C++
========================================================================
	"make all" should create all examples and the shared library.

	Use the %.x rule as a template to build pqRand into your executable (via libpqr.so)
	Set PQR_DIR to the directory where pqRand lives, then	"make yourProgram.x" 
	(where your source code is called "yourProgram.cpp").
	Add needed libraries and object files as necessary.
	Note: LD_LIBRARY_PATH must also point to libpqr.so, or you'll get an error at runtime.
	
CYTHON
========================================================================
	Provided you have installed both Python and Cython, 
	it should be possible to easily compile pYqRand, the Python implementation.
	Simply run the install script, or:
		$ python setup_pYqRand.py build_ext --inplace
	Then you can import into Python
	(provided pYqRand.so is in your local directory, 
	or you can append to sys.path, as in pYqRand_Example.py)
		>>> import pYqRand
	
	The Cython interface is the same as the C++ interface.
	The major difference is that we must introduce Seed_FromEngine().
	to replace C++ assigment (operator=), since Python does not copy on assignment.
	See pYqRand_Example.py for a tutorial (and refer to pYqRand.pyx for additional differences).
	
	Note: Cython has only been tested on my CNU/Linux (CentOS 7; gcc 4.8.5).
	The '--std=c++11' compiler flag is added to enable C++11 (line 3 of pYqRand.pyx,
	so change this flag to the equivalent one if your compiler doesn't use it).

SEEDING
========================================================================
	pqRand::engine requires 1024 bits of seed. Its default constructor
	auto-seeds from std::random_device (/dev/urandom on most linux devices).
	You can also supply your own seed (as a file or std::string), 
	but it must be in the right format (see the documentation for pqRand::Seed).
	The recommended method to store seeds for auditing is:
	(i) auto-seed then (ii) store the seed to a file (~1/3 kB).

DISTRIBUTIONS
========================================================================
	Check out pqRandExample.cpp to see how to access distributions.
